import numpy as np
import requests
import pandas as pd
from flask import Flask, request
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

app = Flask(__name__)

class LSTMModel:
    def __init__(layers, neurones, data):
        model = Sequential()
        for i in range(layers):
            if i == 0:
                # First layer needs input_shape parameter
                model.add(LSTM(hidden_sizes[i], input_shape=(None, input_dim), return_sequences=True))
            elif i == num_layers - 1:
                # Last layer doesn't return sequences
                model.add(LSTM(hidden_sizes[i]))
            else:
                model.add(LSTM(hidden_sizes[i], return_sequences=True))
        # Add output layer
        model.add(Dense(output_dim, activation='softmax'))
        self.model = model
        self.data = data

    def train(self, epochs, batch_size):
        X_train, y_train = self.data
        self.model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
        self.model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size)


@app.route('/listen', methods=['POST'])
def listen():
    data = request.json  # Assuming JSON data is posted
    # Process the posted data here
    print("Received data:", data)
    return "Data received successfully"

@app.route('/train', methods=['POST'])
def listen():
    data = request.json  # Assuming JSON data is posted
    # Process the posted data here
    print("Received data:", data)
    return "Model trained successfully"


@app.route('/test', methods=['POST'])
def listen():
    data = request.json  # Assuming JSON data is posted
    # Process the posted data here
    print("Received data:", data)
    return "Model trained successfully"



if __name__ == "__main__":
    app.run(debug=True)
